from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from filter.chat_types import ChatTypeFilter
from keyboard.inline import *
from message_text.text import messages

start_functions_private_router = Router()
start_functions_private_router.message.filter(ChatTypeFilter(['private']))
user_preferences = {}


async def send_welcome_message(user, target, photo_path='media/images/img_1.png'):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ."""
    user_id = user.id
    if user_id not in user_preferences:
        user_preferences[user_id] = {'language': 'kgz'}

    language = user_preferences[user_id]['language']

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    keyboard_markup = start_functions_keyboard(language)

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    try:
        await target.answer_photo(
            photo=types.FSInputFile(photo_path),
            caption = messages[language]['welcome'].format(user_name=user.full_name),
            reply_markup=keyboard_markup
        )
    except Exception as e:
        await target.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await target.answer(f"{user.full_name}! üòä\n\n{messages[language]['welcome']}")


def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π."""
    if user_id not in user_preferences:
        user_preferences[user_id] = {'language': 'ru'}
    return user_preferences[user_id]['language']


@start_functions_private_router.message(CommandStart())
@start_functions_private_router.message(F.text.lower().contains('start') | (F.text.lower() == 'start'))
async def start_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await send_welcome_message(message.from_user, message)


@start_functions_private_router.callback_query(F.data.startswith('start'))
async def start_command_callback_query(query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query —Å –∫–æ–º–∞–Ω–¥–æ–π start"""
    await query.message.delete()
    await send_welcome_message(query.from_user, query.message)


@start_functions_private_router.callback_query(F.data.startswith('about'))
async def about_bot_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'about'."""
    language = get_user_language(query.from_user.id)
    await query.message.edit_caption(
        caption=messages[language]['about_message'],
        reply_markup=return_menu_from_about_keyboard(language),
        parse_mode=ParseMode.MARKDOWN
    )


@start_functions_private_router.callback_query(F.data.startswith('help'))
async def help_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'help'."""
    language = get_user_language(query.from_user.id)
    await query.message.edit_caption(
        caption=messages[language]['help_message'],
        reply_markup=start_functions_keyboard(language),
        parse_mode=ParseMode.MARKDOWN
    )


@start_functions_private_router.callback_query(F.data == 'change_language')
async def select_language_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback"""
    user_id = query.from_user.id
    if user_id not in user_preferences:
        user_preferences[user_id] = {'language': 'kgz'}

    language = user_preferences[user_id]['language']
    keyboard = language_selection_keyboard(language)
    await query.message.edit_caption(
        caption="Please select your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:",
        reply_markup=keyboard
    )


@start_functions_private_router.callback_query(F.data.startswith('set_language_'))
async def set_language_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback"""
    user_id = query.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if user_id not in user_preferences:
        user_preferences[user_id] = {}

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if query.data == "set_language_ru":
        user_preferences[user_id]['language'] = 'ru'
        response = "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
    elif query.data == "set_language_en":
        user_preferences[user_id]['language'] = 'en'
        response = "Language set to English."
    elif query.data == "set_language_kgz":
        user_preferences[user_id]['language'] = 'kgz'
        response = "–¢–∏–ª –∫—ã—Ä–≥—ã–∑—á–∞ –±–æ–ª—É–ø –æ—Ä–Ω–æ—Ç—É–ª–¥—É."

    language = user_preferences[user_id]['language']
    await query.message.edit_caption(
        caption=response,
        reply_markup=start_functions_keyboard(language),
    )

